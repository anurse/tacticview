@using TacticView.Data
@using Octokit
@using TacticView.Utilitiy
@using Humanizer

@inject GitHubQueryService IssuesService

@if (issues == null)
{
<p><em>Searching the interwebs...</em></p>
}
else
{
<RadzenGrid Data="@issues" TItem="Issue" EmptyText="@Motivator.GetMotivator()" AllowFiltering="true">
    <Columns>
        <RadzenGridColumn Width="90px" TItem="Issue" Title="ID" SortProperty="Number">
            <Template Context="data">
                <GitMergeVisual State="@(data.State.StringValue)" />
                <a style="font-size:16px" target="_blank" href="@(data.PullRequest.HtmlUrl)">@(data.Number)</a>
            </Template>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="Issue" Title="Title" FilterProperty="Title">
            <Template Context="data">
                <a style="font-size:16px" target="_blank" href="@(data.PullRequest.HtmlUrl)">@(data.Title)</a>
            </Template>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="Issue" Title="Labels">
            <Template Context="data">
                @foreach (var label in data.Labels)
                    {
                <span class="issue-label" style="color:@Colors.GetReadableForeColorAsString(label.Color);background-color:#@label.Color">@label.Name &nbsp;</span>
                    }
            </Template>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="Issue" Title="Created" Width="110px">
            <Template Context="data">
                <span style="font-size:16px">@(data.CreatedAt.Humanize())</span>
            </Template>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="Issue" Title="Milestone" Width="80px" FilterProperty="Milestone.Title">
            <Template Context="data">
                <span style="font-size:16px">@(data.Milestone?.Title)</span>
            </Template>
        </RadzenGridColumn>
    </Columns>
</RadzenGrid>
}

@code {
    List<Issue> issues;

    [Parameter]
    public string OrgName { get; set; }

    [Parameter]
    public string RepoName { get; set; }

    [Parameter]
    public string Label { get; set; }

    [Parameter] public bool IsOpen { get; set; }

    protected override async Task OnInitializedAsync()
    {
        issues = await IssuesService.GetPullRequestsAsIssuesAsync(OrgName, RepoName, Label, IsOpen);
    }
}